from pathlib import Path
import platform

from returns.io import IOResultE

from pybuildc.domain.builder import compile_all_obj_files
from pybuildc.domain.compiler import compile, link_static, link_exe


def linux_script(context):
    script_path: Path = context.project / "build.sh"
    build_dir = ".build"

    with open(script_path, "w") as f:
        f.write(f"#!/bin/bash\n")
        f.write(f"# Generated by pybuildc\n")
        f.write("\n#----------Variables-----------#\n")

        f.write(f'PROJECT="{context.project.absolute().name}"\n')
        f.write(f'CC="{context.cc}"\n')
        f.write(f'BUILD_DIR="{build_dir}"\n')
        f.write("CFLAGS=()\n")

        f.write("\n#-------------Setup------------#\n")
        f.write(f'SCRIPT_DIR=$(dirname "$0")\n')
        f.write(f"set -xe\n")
        f.write(f"cd $SCRIPT_DIR\n")

        f.write("\n")
        f.write(f"BIN=$BUILD_DIR/bin/$PROJECT\n")
        f.write(f"mkdir -p $BUILD_DIR/bin\n")
        f.write(f"mkdir -p $BUILD_DIR/obj\n")

        if len(context.build_scripts):
            f.write("\n#---------Dependencies---------#\n")
        for script in context.build_scripts:
            f.write(f"bash {script.relative_to(context.project)}\n")

        f.write("\n#---------Compilation---------#\n")

        # set context to be
        cc = context.cc
        context.cc = "$CC"
        build = context.build
        context.build = "$BUILD_DIR"
        cflags = context.cflags
        context.cflags = (*context.cflags, "${CFLAGS[@]}")
        include_flags = context.include_flags
        context.include_flags = tuple(
            map(lambda f: f.relative_to(context.project), context.include_flags)
        )
        library_flags = context.library_flags
        context.library_flags = tuple(
            map(
                lambda f: (f[0].relative_to(context.project), f[1])
                if f[0]
                else (f[0], f[1]),
                context.library_flags,
            )
        )
        if context.bin == "exe":
            command = compile(
                sorted(map(
                    lambda file: file.relative_to(context.project),
                    context.src.rglob("*.c"),
                )),
                Path("$BIN"),
            )(context)
            f.write(" ".join(command.command))
            f.write("\n")
        elif context.bin == "static":
            command = compile_all_obj_files(
                sorted(map(
                    lambda file: file.relative_to(context.project),
                    context.src.rglob("*.c"),
                ))
            )(context)
            for cmd in command:
                f.write(f"mkdir -p {cmd.output_path.parent}\n")
                f.write(" ".join(cmd.command))
                f.write("\n")
            command = link_static(tuple(map(lambda cmd: cmd.output_path, command)))(
                context
            )
            f.write(" ".join(command.command))
            f.write("\n")

        # Reset context
        context.cc = cc
        context.build = build
        context.cflags = cflags
        context.include_flags = include_flags
        context.library_flags = library_flags

def windows_script(context): 
    script_path: Path = context.project / "build.bat"
    build_dir = ".build"

    with open(script_path, "w") as f:
        f.write(f"@echo off\n")
        f.write(f":: Generated by pybuildc\n")
        f.write("\n::----------Variables-----------::\n")

        f.write(f'set PROJECT="{context.project.absolute().name}"\n')
        f.write(f'set CC="{context.cc}"\n')
        f.write(f'set BUILD_DIR="{build_dir}\"\n')
        f.write("set CFLAGS=\n")

        f.write("\n::-------------Setup------------::\n")
        f.write(f"cd /D %~dp0\n")

        f.write("\n")
        f.write(f"mkdir %BUILD_DIR%\\bin 2>NUL\n")
        f.write(f"mkdir %BUILD_DIR%\\obj 2>NUL\n")

        if len(context.build_scripts):
            f.write("\n::---------Dependencies---------::\n")
            for script in context.build_scripts:
                f.write(f"call {script.relative_to(context.project).with_suffix(".bat")}\n")
                f.write(f"cd /D %~dp0\n")
        f.write("\n::---------Compilation---------::\n")

        # set context to be
        cc = context.cc
        context.cc = "%CC%"
        build = context.build
        context.build = "%BUILD_DIR%"
        cflags = context.cflags
        context.cflags = (*context.cflags, "%CFLAGS%")
        include_flags = context.include_flags
        context.include_flags = tuple(
            map(lambda f: f.relative_to(context.project), context.include_flags)
        )
        library_flags = context.library_flags
        context.library_flags = tuple(
            map(
                lambda f: (f[0].relative_to(context.project), f[1])
                if f[0]
                else (f[0], f[1]),
                context.library_flags,
            )
        )
        if context.bin == "exe":
            command = link_exe(
                sorted(map(
                    lambda file: file.relative_to(context.project),
                    context.src.rglob("*.c"),
                )),
            )(context)
            f.write(" ".join(command.command))
            f.write("\n")
        elif context.bin == "static":
            command = compile_all_obj_files(
                sorted(map(
                    lambda file: file.relative_to(context.project),
                    context.src.rglob("*.c"),
                ))
            )(context)
            for cmd in command:
                f.write(f"mkdir {cmd.output_path.parent} 2>NUL\n")
                f.write(" ".join(cmd.command))
                f.write("\n")
            command = link_static(tuple(map(lambda cmd: cmd.output_path, command)))(
                context
            )
            f.write(" ".join(command.command))
            f.write("\n")

        # Reset context
        context.cc = cc
        context.build = build
        context.cflags = cflags
        context.include_flags = include_flags
        context.library_flags = library_flags

def build_script(context):
    p = platform.system()
    if p == "Linux":
        linux_script(context)
        return IOResultE.from_value(context)
    elif p == "Windows":
        windows_script(context)
        return IOResultE.from_value(context)
    return IOResultE.from_failure(Exception(f"Platform not supported: {p}"))